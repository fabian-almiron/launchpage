# Ultra simplified Dockerfile for LaunchPage Builder
FROM nginx:alpine

WORKDIR /usr/share/nginx/html

# Copy frontend files
COPY frontend/public .

# Use the login page as the index page (directly copy it)
RUN cp login.html index.html

# Create a mock API handler file
RUN mkdir -p shared && echo 'window.DEMO_MODE = true; \
const mockToken = "mock-jwt-token"; \
\
/* Mock user data */ \
const mockUser = { \
  id: "mock-user-id", \
  name: "Demo User", \
  email: "demo@example.com", \
  role: "admin" \
}; \
\
/* Override window.fetch for API calls */ \
const originalFetch = window.fetch; \
window.fetch = function(url, options = {}) { \
  if (typeof url === "string") { \
    /* Mock login endpoint */ \
    if (url.includes("/api/login") || url.includes("/api/auth/login")) { \
      console.log("Mock login request", options); \
      localStorage.setItem("token", mockToken); \
      return Promise.resolve(new Response( \
        JSON.stringify({ token: mockToken, success: true }), \
        { status: 200, headers: { "Content-Type": "application/json" } } \
      )); \
    } \
    /* Mock user endpoint */ \
    if (url.includes("/api/me")) { \
      const token = localStorage.getItem("token"); \
      if (!token) { \
        return Promise.resolve(new Response( \
          JSON.stringify({ error: "Unauthorized" }), \
          { status: 401, headers: { "Content-Type": "application/json" } } \
        )); \
      } \
      console.log("Mock /api/me request with token"); \
      return Promise.resolve(new Response( \
        JSON.stringify(mockUser), \
        { status: 200, headers: { "Content-Type": "application/json" } } \
      )); \
    } \
    /* Mock pages endpoint */ \
    if (url.includes("/api/pages")) { \
      console.log("Mock pages request"); \
      return Promise.resolve(new Response( \
        JSON.stringify([ \
          { id: "page1", title: "Home Page", slug: "home", status: "published" }, \
          { id: "page2", title: "About Us", slug: "about", status: "published" }, \
          { id: "page3", title: "Contact", slug: "contact", status: "draft" } \
        ]), \
        { status: 200, headers: { "Content-Type": "application/json" } } \
      )); \
    } \
  } \
  return originalFetch.apply(this, arguments); \
}; \
\
/* Add event listener to handle logout */ \
document.addEventListener("DOMContentLoaded", function() { \
  // Find all logout links and buttons \
  const logoutElements = document.querySelectorAll("a[href=\'/logout\'], button.logout, a.logout, [data-action=\'logout\']"); \
  \
  logoutElements.forEach(function(element) { \
    element.addEventListener("click", function(event) { \
      event.preventDefault(); \
      \
      // Clear token and redirect to login \
      console.log("Logging out..."); \
      localStorage.removeItem("token"); \
      window.location.href = "/login.html"; \
    }); \
  }); \
  \
  // Special handling for login form \
  const loginForm = document.getElementById("login-form"); \
  if (loginForm) { \
    loginForm.addEventListener("submit", function(event) { \
      event.preventDefault(); \
      console.log("Login form submitted"); \
      \
      // Set mock token and redirect to dashboard \
      localStorage.setItem("token", mockToken); \
      window.location.href = "/dashboard.html"; \
    }); \
  } \
});' > shared/mock-api-enhanced.js

# Add this script to all HTML files
RUN for file in $(find . -name "*.html"); do \
    sed -i 's/<\/head>/<script src="\/shared\/mock-api-enhanced.js"><\/script><\/head>/' $file; \
done

# Add nginx configuration to handle SPA routing
RUN echo 'server { \
    listen       80; \
    server_name  localhost; \
    location / { \
        root   /usr/share/nginx/html; \
        index  index.html login.html; \
        try_files $uri $uri/ /index.html; \
    } \
    error_page   500 502 503 504  /50x.html; \
    location = /50x.html { \
        root   /usr/share/nginx/html; \
    } \
}' > /etc/nginx/conf.d/default.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"] 